/*
Aby utworzyæ projekt graddle w Eclipse nale¿y
Wykonaæ: 1,2,5
Jeœli bêdzie siê pluæ o nazwê to sprawdziæ czy nazwa projektu zgadza siê z zawartoœci¹ settings.gradle
Jeœli dalej bedzie siê pluæ wykonaæ kroki 1-7

1) Utworzuæ projekt java
2) Dodaæ katalog gradle, pliki: build.gradle, gradlew, gradlew.bat, settings.gradle
3) Przenieœæ katalog poza workspace
4) Odœwierzyæ workspace i potwierdziæ usuniêcie projekty
5) Import Gradle/Existing 
6) Przenieœæ projekt z powrotem do workspace i odœwierzyæ workspace
7) Zaimportowac jako zwyk³y projekt
*/

/*
Tutoriale: 
	https://www.tutorialspoint.com/gradle/index.htm
	https://www.petrikainulainen.net/getting-started-with-gradle/
*/

/*
Cykl zycia podczas kazego build
	Projekt (GP) - pojedynczy projekt prowadzi do wybudowania jednego artefaktu (np plik jar lub zbior wielu plikow klas)
	Task - reprezentacja akcji (potencjalnie jednej z wielu) prowadzacych do wybudowania projektu
Sa 3 fazy budowania projektu
	initialization - identyfikujemy wszystkie GP potrzebnne do wykonania pojedynczego calego build.
		W multu-propjektach  moze byc tego wiele (np frontend, backend i jakies biblioteki).
		Tutaj wykonywany jest kod umieszczony w pliku settings.gradle
	configuration - gradle buduje graf (acykliczny - bez petli) taskow do wykonania
		Tutaj wykonywany jest kod (poza kodem akcji taskow - patrz dalej) z pliku build.gradle
	execution  - wywolanie kolejnych taskow na podstawie grafu. 
		Tutaj wykonywany jest kod akcji taskow, czyli doFirst i doLast
		
println 'phase 2'
task doIt{
	println 'phase 2'
	doFirst{
		println 'phase 3'
	}
	doLast{
		println 'phase 3'
	}
	println 'phase 2'
}	
println 'phase 2'	
		 	
*/

/*
	Pluginy moge byc skryptowe lub binarne
	
	S - tylko z lokanego systemu plikow lub zdalnie za pomoca HTTP URL:
		- apply from: 'other.gradle'
	B - klasa zdefiniowana w skrypcie build
	  - plik. java w buildSrc
	  - klasa w .jar, ktory jest umieszczeony w dependency
	  - na portalu https://plugins.gradle.org lub innych repo:
		- apply plugin: 'java'
		- apply plugin: JavaPlugin
		- plugins {
 		    id 'java'
		  }
		  Dziala tylko dla pluginow z https://plugins.gradle.org
		- buildscript {
			repositories {
			  jcenter()
			}
			dependencies {
			  classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:0.4.1"
			}
		  }
		  apply plugin: "com.jfrog.bintray"
		  Dodawanie pluginu z innego repo niz https://plugins.gradle.org
		  
		  
    Przyklad takiego plugina z jego opisem: https://github.com/nilsmagnus/wsdl2java 
    
    wsdl2java {
      wsdlsToGenerate = [
              ['-p','com.acme.mypackage', '-autoNameResolution',"$projectDir/src/main/resources/wsdl/stockqoute.wsdl"]
      ]
      generatedWsdlDir = file("$projectDir/generatedsources")
      wsdlDir = file("$projectDir/src/main/resources/wsdl")
      locale = Locale.FRANCE
    }
    To jakby rozszerzenie taska dodanego z tym pluginem (bo nowy task to "task wsdl2java{...}")		  		
*/

plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	/*
	Ogolnie caly plugin opisany jest tutaj: https://docs.gradle.org/2.4/userguide/java_plugin.html
	Ponizej zamieszczam tylko jego fragmenty
	
	java dodaje nowe taski
		- clean: usuwa katalog build. Moze sie zdarzyc, ze cos "trzyma" plik, wtedy nalezy uzyc programu LockHunter
		- compileJava - kompiluje kod  
		- assemble - buduje wszystkie archiwa (jar)
			:compileJava
			:processResources 
			:classes
			:jar
			:assemble
		- check - wykonuje wsystkiw taki weryfikacyjne, w szczegolnosci test
		- build - wykonuje check i assemble
			:compileJava
			:processResources 
			:classes
			:jar
			:assemble
			:compileTestJava 
			:processTestResources 
			:testClasses 
			:test 
			:check 
			:build		
		- test - uruchamia unt testy tesy. Log z bledami mozna znalezc w build/reports/reports/tests/test/index.html 
	*/
}

/*
Logowanie: https://docs.gradle.org/current/userguide/logging.html
Domyslnie wyswietla 1-4. Aby pokazywac
	3 -w 
	5 -i - duuuzo informacji o tym, co sie dzieje
	6 -d - ku...sko duzo informacji
		
logger.quiet(    '1 An info log message which is always logged.')
logger.error(    '2 An error log message.')
logger.warn(     '3 A warning log message.')
logger.lifecycle('4 A lifecycle info log message.')
logger.info(     '5 An info log message.')
logger.debug(    '6 A debug log message.')
logger.trace(    '7 A trace log message.')

-s /-S pokaze standardowy(zalecany) stacktrace / pelen stacktrace
*/

group = 'com.gradle.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

/*
	! Dodatkowe i raczej zadko uzywane !
Domyslne polozenie katalogow w java to np 
	src/main/java
	src/test/resources etc...
Mozna je zmienic ponizszym
sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}
*/

/*
Konfigurowanie zrodel dla dependencies
*/
repositories {
	/*
	//*Dodawanie repozytorium IVY
	ivy {
		//z sieci
        url 'http://ivy.petrikainulainen.net/repo'
        //z lokalnego katalogu
        url '../ivy-repo'
    }
    
    //*Dodawanie z rezo maven
    //Aby dodawac dependency z http://repo1.maven.org/maven2/ nalezy dodac
    mavenCentral()
    //Aby dodawac dependency z http://jcenter.bintray.com/
    jcenter()
    //Aby dodawac dependency z lokalnego repo maven nalezy dodac
    mavenLocal()
    maven {
        url 'http://maven.petrikainulainen.net/repo'
        url '../maven-repo'
    }    
    
    //*Dodawanie z lokalnego katalogu dependency. Przeszukane zostana katalogi libA i libB
    flatDir {
        dirs 'libA', 'libB'
    }
    
	*/
	mavenCentral()
}

/*
Opis zaleznosci z grafem: https://docs.gradle.org/2.4/userguide/java_plugin.html#sec:java_plugin_and_dependency_management
Zasadniczo najpoluparniejsze:
	- compile - uzywane przez :compileTestJava 
	- runtime - rozszerza compile
	- testCompile - uzywa c tylko dl dependency uywanych tylko podczas testow np JUnit
		testCompile 'junit:junit:4.11'
	- compileOnly - spowoduje, ze dependency bedzie obencne dla compile, test + runtime, ale nie dla jar!		
Chodzi o to, ze program app uzywa biblioteki foo, ktora wewnetrznie uzywa biblioteki bar, wiec TYLKO foo jest 
niezbedne do skomilowania app, ale zarowno foo jak i bar do uruchomienia app
*/
dependencies {
	/*
	compile group: 'foo', name: 'foo', version: '0.1'
		jest rownoznaczne
	compile 'foo:foo:0.1'
	
	compile (
        [group: 'foo', name: 'foo', version: '0.1'],
        [group: 'bar', name: 'bar', version: '0.1']
    )
    	jest rownoznaczne
    compile 'foo:foo:0.1', 'bar:bar:0.1'	
    
    Teraz Czym roznia sie ponizsze?
    	compile - przestarzaly
    	api - 
    	implementation
    Szczegoly z przykladem  w https://stackoverflow.com/a/48388463
    W skrucie mamy app korzystajaca z libA korzystajaca z libB
    app ma implementation libA
    Jesli libA ma api lub compile dla LibB, to app bedzie mogl korzystac z LibB (np LibB.getVal();)
    Jesli libA ma implementation dla LibB, to app nie bedzie mogl korzystac a LibB (LibB.getVal(); nie skompiluje sie)
	*/
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	// https://mvnrepository.com/artifact/org.javatuples/javatuples
	compileOnly  group: 'org.javatuples', name: 'javatuples', version: '1.2'	
}

/*
Dla plugina "java" - ustawianie main class do generowania pliku jar. 
 - Konieczne tylko jesli ma byc to aplikacja (a nie biblioteka) 
 - Nie jest to konieczne dla Springa (inny plugin)
 
	jar {
	    manifest {
	        attributes 'Main-Class': 'com.gradle.test.GradleTest.GradleTestApplication.HelloWorld'
	    }
	}

Co wiecej spring zalatwia tez sprawe fat jar, czyli ladowania dependancy do jar'a
Bez tego nalezalo by zrobic ponizsze:

	jar {
	    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	    manifest {
	        attributes 'Main-Class': 'com.gradle.test.GradleTest.GradleTestApplication'
	    }
	}

Fat jar w innym podejsciu: osobny task
	task customFatJar(type: Jar) {
	    manifest {
	        attributes 'Main-Class': 'com.gradle.test.GradleTest.GradleTestApplication'
	    }
	    //nadaje czesc nazwy pliku jar "testJar-0.0.1-SNAPSHOT.jar"
	    //[archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
	    //Tutaj szczegoly https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
	    baseName = 'testJar'
	    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	    with jar
	}
*/	


/*
Reguluje tworzenie plikow jar przez plugin od Springa
bootJar {
	//Zmiana glownej klasy aplikacji z domyslnej
	//mainClass = 'com.example.demo.Application'
	
	//Powoduje, ze Assemble nie wygeneruje build/libs i pliku jar
    //enabled = false
    
    //nadanie nazwy pliku docelowego
    //Wiecej patrz -> customFatJar
    archiveName = 'testJar!'
}
*/

/*
Gradle domyœlnie szuka sources w src/main/java wiêc sa 2 opcje:
	1) Trzymaæ sources w src/main/java
	2) podaæ kolejne odla jak ponizej
sourceSets {
    main {
        java {
            srcDirs 'src'
            //srcDirs 'src1'
        }
    }
}
*/ 

/* -- Taski -- */
/*
task hello {
	//wykonywane jako 2 podczas execution 
	doLast {
		println '-> 1'
	}
	//wykonywane podczas configuration   
	println '-> 2'
	//wykonywane jako 2 podczas execution 
	doFirst {
		println '-> 3'
	}
}*/

/*
to ma dzialac jak doLase, ale w Gradle 5 zostalo wycofane
task hello << {	
		println '1'	
}
*/

/*
dependsOn spowoduje, ze wywolanie t2 zostanie poprzedzone wywolaniem t1
task t1{
	doFirst{println('t1 1')}
	doLast{println('t1 2')}
}
task t2(dependsOn: 't1'){
	doFirst{println('t2 1')}
	doLast{println('t2 2')}
}

//alternatywnie
task t1{...}
task t2{...}
task2.dependsOn task1

//doda do dependsOn wszystkie taski zaczynajace siê od "ta_"
task t7(dependsOn:
		tasks.findAll { 
			task -> task.name.startsWith('ta_') 
		}
	){	
}

 ----------------------------------------------------------
 
Wywolywanie jednego taska z wewnatrz drugiego jest niewspierane. 
Zaleca sie uzywanie depends.On
Ponizej obejscie.
task t3{
	doFirst{println('t3 1')}
	println('t3')
	doLast{println('t3 2')}
}
task t4{
	doFirst{println('t4 1')}
	println('t4')	
	t3//To nie zadziala
	doLast{println('t4 2')}
}
 t4.finalizedBy t3
/*

/*
Nie moze byc 2 taskow o tej samej nazwie
task t5{
	doFirst{println('t5 1')}
	doLast{println('t5 2')}
}
task t5{
	doFirst{println('t5 3')}
	doLast{println('t5 4')}
}
*/

/*
Gradle siedzi na groove/kotlin i jest pelnoprawnym jezykiem programowania. Ponizej przyk³ad mozliwosci
	tasks - to lista taskow udostepniana przez gradle
	https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskCollection.html 
task t8 {
    doLast {
        tasks
        	.findAll { 
				task -> task.name.startsWith('t') 
			}
			.each { task -> println(task.name)
        	}
    }
}
*/

